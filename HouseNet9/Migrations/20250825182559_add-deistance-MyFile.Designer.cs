// <auto-generated />
using System;
using HouseNet9.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HouseNet9.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250825182559_add-deistance-MyFile")]
    partial class adddeistanceMyFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Data.HouseRentalData.DescriptionPage", b =>
                {
                    b.Property<int>("DescriptionPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescriptionPageId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DescriptionPageId");

                    b.HasIndex("HouseId");

                    b.ToTable("DescriptionPages");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DetailedInformation", b =>
                {
                    b.Property<int>("DetailedInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailedInformationId"));

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetailedInformationId");

                    b.HasIndex("HouseId");

                    b.ToTable("DetailedInformation");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DetailedInformationItem", b =>
                {
                    b.Property<int>("DetailedInformationItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailedInformationItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DetailedInformationId")
                        .HasColumnType("int");

                    b.HasKey("DetailedInformationItemId");

                    b.HasIndex("DetailedInformationId");

                    b.ToTable("DetailedInformationItems");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.Distance", b =>
                {
                    b.Property<int>("DistanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceID"));

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistanceID");

                    b.HasIndex("HouseId");

                    b.ToTable("Distances");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DistanceItem", b =>
                {
                    b.Property<int>("DistanceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceItemId"));

                    b.Property<int?>("DistanceID")
                        .HasColumnType("int");

                    b.Property<string>("DistanceInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistanceItemId");

                    b.HasIndex("DistanceID");

                    b.ToTable("DistanceItems");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.GeneralInformation", b =>
                {
                    b.Property<int>("GeneralInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralInformationId"));

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralInformationId");

                    b.HasIndex("HouseId");

                    b.ToTable("GeneralInformation");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HouseId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.MyFile", b =>
                {
                    b.Property<int>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileID"));

                    b.Property<int?>("DescriptionPageId")
                        .HasColumnType("int");

                    b.Property<int?>("DetailedInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceID")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileID");

                    b.HasIndex("DescriptionPageId")
                        .IsUnique()
                        .HasFilter("[DescriptionPageId] IS NOT NULL");

                    b.HasIndex("DetailedInformationId")
                        .IsUnique()
                        .HasFilter("[DetailedInformationId] IS NOT NULL");

                    b.HasIndex("DistanceID")
                        .IsUnique()
                        .HasFilter("[DistanceID] IS NOT NULL");

                    b.HasIndex("GeneralInformationId")
                        .IsUnique()
                        .HasFilter("[GeneralInformationId] IS NOT NULL");

                    b.ToTable("MyFiles");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalClient", b =>
                {
                    b.Property<int>("RentalClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalClientId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentalClientId");

                    b.ToTable("RentalClients");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalHouse", b =>
                {
                    b.Property<int>("RentalHouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalHouseID"));

                    b.Property<string>("Annotations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("RentalClientId")
                        .HasColumnType("int");

                    b.Property<int?>("RentalStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("RentalHouseID");

                    b.HasIndex("HouseId");

                    b.HasIndex("RentalClientId");

                    b.HasIndex("RentalStatusID");

                    b.ToTable("RentalHouses");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalPrice", b =>
                {
                    b.Property<int>("RentalPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalPriceID"));

                    b.Property<DateTime?>("DateTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("OneWeek")
                        .HasColumnType("money");

                    b.Property<decimal>("TwoWeeks")
                        .HasColumnType("money");

                    b.HasKey("RentalPriceID");

                    b.HasIndex("HouseId");

                    b.ToTable("RentalPrices");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalStatus", b =>
                {
                    b.Property<int>("RentalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalStatusID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentalStatusID");

                    b.ToTable("RentalStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DescriptionPage", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany("DescriptionPages")
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DetailedInformation", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany("DetailedInformation")
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DetailedInformationItem", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.DetailedInformation", "DetailedInformation")
                        .WithMany("DetailedInformationItems")
                        .HasForeignKey("DetailedInformationId");

                    b.Navigation("DetailedInformation");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.Distance", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DistanceItem", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.Distance", "Distance")
                        .WithMany("DistanceItems")
                        .HasForeignKey("DistanceID");

                    b.Navigation("Distance");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.GeneralInformation", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany("GeneralInformation")
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.MyFile", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.DescriptionPage", "DescriptionPage")
                        .WithOne("Image")
                        .HasForeignKey("Data.Data.HouseRentalData.MyFile", "DescriptionPageId");

                    b.HasOne("Data.Data.HouseRentalData.DetailedInformation", "DetailedInformation")
                        .WithOne("Image")
                        .HasForeignKey("Data.Data.HouseRentalData.MyFile", "DetailedInformationId");

                    b.HasOne("Data.Data.HouseRentalData.Distance", "Distance")
                        .WithOne("Image")
                        .HasForeignKey("Data.Data.HouseRentalData.MyFile", "DistanceID");

                    b.HasOne("Data.Data.HouseRentalData.GeneralInformation", "GeneralInformation")
                        .WithOne("Image")
                        .HasForeignKey("Data.Data.HouseRentalData.MyFile", "GeneralInformationId");

                    b.Navigation("DescriptionPage");

                    b.Navigation("DetailedInformation");

                    b.Navigation("Distance");

                    b.Navigation("GeneralInformation");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalHouse", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany("RentalHouses")
                        .HasForeignKey("HouseId");

                    b.HasOne("Data.Data.HouseRentalData.RentalClient", "RentalClient")
                        .WithMany("RentalHouses")
                        .HasForeignKey("RentalClientId");

                    b.HasOne("Data.Data.HouseRentalData.RentalStatus", "RentalStatus")
                        .WithMany("RentalHouses")
                        .HasForeignKey("RentalStatusID");

                    b.Navigation("House");

                    b.Navigation("RentalClient");

                    b.Navigation("RentalStatus");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalPrice", b =>
                {
                    b.HasOne("Data.Data.HouseRentalData.House", "House")
                        .WithMany("RentalPrices")
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DescriptionPage", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.DetailedInformation", b =>
                {
                    b.Navigation("DetailedInformationItems");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.Distance", b =>
                {
                    b.Navigation("DistanceItems");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.GeneralInformation", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.House", b =>
                {
                    b.Navigation("DescriptionPages");

                    b.Navigation("DetailedInformation");

                    b.Navigation("GeneralInformation");

                    b.Navigation("RentalHouses");

                    b.Navigation("RentalPrices");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalClient", b =>
                {
                    b.Navigation("RentalHouses");
                });

            modelBuilder.Entity("Data.Data.HouseRentalData.RentalStatus", b =>
                {
                    b.Navigation("RentalHouses");
                });
#pragma warning restore 612, 618
        }
    }
}
